from z3 import *
from Crypto.Util.number import long_to_bytes as ltb
from gmpy2 import gcdext
pubkey = 577080346122592746450960451960811644036616146551114466727848435471345510503600476295033089858879506008659314011731832530327234404538741244932419600335200164601269385608667547863884257092161720382751699219503255979447796158029804610763137212345011761551677964560842758022253563721669200186956359020683979540809
ct = 66888784942083126019153811303159234927089875142104191133776750131159613684832139811204509826271372659492496969532819836891353636503721323922652625216288408158698171649305982910480306402937468863367546112783793370786163668258764837887181566893024918981141432949849964495587061024927468880779183895047695332465
r = Int('r')
s = Solver()
s.add(51*r**4 + 88*r**3 + 128680*r**2 + 134636*r + 9816209 == pubkey)
s.check()
model = s.model()
print model[r]
r = 57998468644974352708871490365213079390068504521588799445473981772354729547806
p =  3 * r**2 +  2 * r + 7331
q = 17 * r**2 + 18 * r + 1339
def decrypt(ct, p, q):
    N = p*q
    x_p = pow(ct, (p + 1) // 4, p)
    x_q = pow(ct, (q + 1) // 4, q)
    _, a, b = gcdext(p, q)
    
    x1 = (x_p*b*q + x_q*a*p) % N
    x2 = (x_p*b*q - x_q*a*p) % N
    for pt in (x1, N-x1, x2, N-x2):
        if int(bin(pt)[-8:], 2) == ord('X'):
            return pt

print ltb(decrypt(ct,p,q))